# Home Assistant Sungrow inverter integration
# https://github.com/mkaiser/Sungrow-SHx-Inverter-Modbus-Home-Assistant
# by Martin Kaiser
# last update: 2023-11-04 (2)
#
# Note: This YAML file will only work with Home Assistant >= 2023.10

modbus:
  - name: SungrowSHx_1
    type: tcp
    host: !secret sungrow_modbus_host_ip_1
    port: !secret sungrow_modbus_port_1
    retries: 10
    sensors:
      - unique_id: dev_code_sgunit1
        name: Dev Code Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 4999 # reg 5000
        input_type: input
        data_type: uint16
        scan_interval: 600

      - unique_id: daily_pv_gen_battery_discharge_sgunit1
        name: Daily Pv Gen Battery Discharge Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5002 # reg 5003
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: total_pv_gen_battery_discharge_sgunit1
        name: Total Pv Gen Battery Discharge Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5003 # reg 5004
        input_type: input
        data_type: uint32
        swap: word
        unit_of_measurement: kWh
        precision: 1
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - unique_id: inverter_temperature_sgunit1
        name: Inverter Temperature Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5007 # reg 5008
        input_type: input
        data_type: int16
        precision: 1
        unit_of_measurement: °C
        device_class: Temperature
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - unique_id: mppt1_voltage_sgunit1
        name: Mppt1 Voltage Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5010 # reg 5011
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - unique_id: mppt1_current_sgunit1
        name: Mppt1 Current Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5011 # reg 5012
        input_type: input
        data_type: uint16
        precision: 2
        unit_of_measurement: A
        device_class: Current
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - unique_id: mppt2_voltage_sgunit1
        name: Mppt2 Voltage Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5012 # reg 5013
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - unique_id: mppt2_current_sgunit1
        name: Mppt2 Current Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5013 # reg 5014
        input_type: input
        data_type: uint16
        precision: 2
        unit_of_measurement: A
        device_class: Current
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - unique_id: total_dc_power_sgunit1
        name: Total Dc Power Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5016 # reg 5017
        input_type: input
        data_type: uint32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - unique_id: phase_a_voltage_sgunit1
        name: Phase A Voltage Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5018 # reg: 5019
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - unique_id: phase_b_voltage_sgunit1
        name: Phase B Voltage Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5019 # reg: 5020
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - unique_id: phase_c_voltage_sgunit1
        name: Phase C Voltage Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5020 # reg: 5021
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - unique_id: grid_frequency_sgunit1
        name: Grid Frequency Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5035 # reg 5036
        input_type: input
        data_type: uint16
        precision: 2
        unit_of_measurement: "Hz"
        device_class: frequency
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - unique_id: reactive_power_sgunit1
        name: Reactive Power Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5032 # reg 5033
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - unique_id: power_factor_sgunit1
        name: Power Factor Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5034 # reg 5035
        input_type: input
        data_type: int16
        precision: 3
        unit_of_measurement: "%"
        device_class: power_factor
        state_class: measurement
        scale: 0.001
        scan_interval: 10

      #https://www.photovoltaikforum.com/thread/166134-daten-lesen-vom-sungrow-wechselrichtern-modbus/?pageNo=13
      #Meter Active Power: 5601-5602 S32 W (Energiezähler Wirkleistung)
      #Meter Phase A Active Power: 5603-5604 S32 W (Stromzähler Phase A Wirkleistung)
      #Meter Phase B Active Power: 5605-5606 S32 W (Stromzähler Phase B Wirkleistung)
      #Meter Phase C Active Power: 5607-5608 S32 W (Stromzähler Phase C Wirkleistung)
      - unique_id: meter_active_power_raw_sgunit1
        name: Meter Active Power Raw Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5600 # reg 5601
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - unique_id: meter_phase_a_active_power_raw_sgunit1
        name: Meter Phase A Active Power Raw Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5602 # reg 5603
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - unique_id: meter_phase_b_active_power_raw_sgunit1
        name: Meter Phase B Active Power Raw Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5604 # reg 5605
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - unique_id: meter_phase_c_active_power_raw_sgunit1
        name: Meter Phase C Active Power Raw Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5606 # reg 5607
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - unique_id: bdc_rated_power_sgunit1
        name: Bdc Rated Power Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5627 # reg 5628
        input_type: input
        data_type: uint16
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        scale: 100
        scan_interval: 600

      - unique_id: bms_max_charging_current_sgunit1
        name: Bms Max Charging Current Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5634 # reg 5635
        input_type: input
        data_type: uint16
        precision: 0
        unit_of_measurement: A
        device_class: Current
        state_class: measurement
        scale: 1
        scan_interval: 60

      - unique_id: bms_max_discharging_current_sgunit1
        name: Bms Max Discharging Current Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5635 # reg 5636
        input_type: input
        data_type: uint16
        precision: 0
        unit_of_measurement: A
        device_class: Current
        state_class: measurement
        scale: 1
        scan_interval: 60

      #https://www.photovoltaikforum.com/thread/166134-daten-lesen-vom-sungrow-wechselrichtern-modbus/?pageNo=13
      #Phase A Backup Power: 5723 S16 W (Backup Leistung Phase A)
      #Phase B Backup Power: 5724 S16 W (Backup Leistung Phase B)
      #Phase C Backup Power: 5725 S16 W (Backup Leistung Phase C)
      - unique_id: total_backup_power_sgunit1
        name: Total Backup Power Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5725 # reg 5726
        input_type: input
        data_type: int16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - unique_id: backup_phase_a_power_sgunit1
        name: Backup Phase A Power Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5722 # reg 5723
        input_type: input
        data_type: int16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - unique_id: backup_phase_b_power_sgunit1
        name: Backup Phase B Power Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5723 # reg 5724
        input_type: input
        data_type: int16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - unique_id: backup_phase_c_power_sgunit1
        name: Backup Phase C Power Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 5724 # reg 5725
        input_type: input
        data_type: int16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      # Start monthly PV generation
      - unique_id: monthly_pv_generation_01_january_sgunit1
        name: Monthly Pv Generation 01 January Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6226 # reg 6227
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: monthly_pv_generation_02_february_sgunit1
        name: Monthly Pv Generation 02 February Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6227 # reg 6228
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: monthly_pv_generation_03_march_sgunit1
        name: Monthly Pv Generation 03 March Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6228 # reg 6229
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: monthly_pv_generation_04_april_sgunit1
        name: Monthly Pv Generation 04 April Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6229 # reg 6230
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: monthly_pv_generation_05_may_sgunit1
        name: Monthly Pv Generation 05 May Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6230 # reg 6231
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: monthly_pv_generation_06_june_sgunit1
        name: Monthly Pv Generation 06 June Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6231 # reg 6232
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: monthly_pv_generation_07_july_sgunit1
        name: Monthly Pv Generation 07 July Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6232 # reg 6233
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: monthly_pv_generation_08_august_sgunit1
        name: Monthly Pv Generation 08 August Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6233 # reg 6234
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: monthly_pv_generation_09_september_sgunit1
        name: Monthly Pv Generation 09 September Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6234 # reg 6235
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: monthly_pv_generation_10_october_sgunit1
        name: Monthly Pv Generation 10 October Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6235 # reg 6236
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: monthly_pv_generation_11_november_sgunit1
        name: Monthly Pv Generation 11 November Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6236 # reg 6237
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: monthly_pv_generation_12_december_sgunit1
        name: Monthly Pv Generation 12 December Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6237 # reg 6238
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600
      # End monthly PV generation

      # Start yearly pv generation
      - unique_id: yearly_pv_generation_2019_sgunit1
        name: Yearly Pv Generation 2019 Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6257 # reg 6258
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: yearly_pv_generation_2020_sgunit1
        name: Yearly Pv Generation 2020 Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6259 # reg 6260
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: yearly_pv_generation_2021_sgunit1
        name: Yearly Pv Generation 2021 Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6261 # reg 6262
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: yearly_pv_generation_2022_sgunit1
        name: Yearly Pv Generation 2022 Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6263 # reg 6264
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: yearly_pv_generation_2023_sgunit1
        name: Yearly Pv Generation 2023 Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6265 # reg 6266
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: yearly_pv_generation_2024_sgunit1
        name: Yearly Pv Generation 2024 Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6267 # reg 6268
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: yearly_pv_generation_2025_sgunit1
        name: Yearly Pv Generation 2025 Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6269 # reg 6270
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: yearly_pv_generation_2026_sgunit1
        name: Yearly Pv Generation 2026 Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6271 # reg 6272
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: yearly_pv_generation_2027_sgunit1
        name: Yearly Pv Generation 2027 Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6273 # reg 6274
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: yearly_pv_generation_2028_sgunit1
        name: Yearly Pv Generation 2028 Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6275 # reg 6276
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: yearly_pv_generation_2029_sgunit1
        name: Yearly Pv Generation 2029 Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6277 # reg 6278
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600
      # End yearly pv generation

      # Start monthly export
      - unique_id: monthly_export_01_january_sgunit1
        name: Monthly Export 01 January Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6595 # reg 6596
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: monthly_export_02_february_sgunit1
        name: Monthly Export 02 February Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6596 # reg 6597
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: monthly_export_03_march_sgunit1
        name: Monthly Export 03 March Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6597 # reg 6598
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: monthly_export_04_april_sgunit1
        name: Monthly Export 04 April Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6598 # reg 6599
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: monthly_export_05_may_sgunit1
        name: Monthly Export 05 May Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6599 # reg 6600
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: monthly_export_06_june_sgunit1
        name: Monthly Export 06 June Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6600 # reg 6601
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: monthly_export_07_july_sgunit1
        name: Monthly Export 07 July Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6601 # reg 6602
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: monthly_export_08_august_sgunit1
        name: Monthly Export 08 August Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6602 # reg 6603
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: monthly_export_09_september_sgunit1
        name: Monthly Export 09 September Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6603 # reg 6604
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: monthly_export_10_october_sgunit1
        name: Monthly Export 10 October Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6604 # reg 6605
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: monthly_export_11_november_sgunit1
        name: Monthly Export 11 November Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6605 # reg 6606
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: monthly_export_12_december_sgunit1
        name: Monthly Export 12 December Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6606 # reg 6607
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600
      # End monthly export

      # Start yearly export energy from PV
      - unique_id: yearly_export_2019_sgunit1
        name: Yearly Export 2019 Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6615 # reg 6616
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - unique_id: yearly_export_2020_sgunit1
        name: Yearly Export 2020 Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6617 # reg 6618
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - unique_id: yearly_export_2021_sgunit1
        name: Yearly Export 2021 Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6619 # reg 6620
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - unique_id: yearly_export_2022_sgunit1
        name: Yearly Export 2022 Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6621 # reg 6622
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - unique_id: yearly_export_2023_sgunit1
        name: Yearly Export 2023 Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6623 # reg 6624
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - unique_id: yearly_export_2024_sgunit1
        name: Yearly Export 2024 Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6625 # reg 6626
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - unique_id: yearly_export_2025_sgunit1
        name: Yearly Export 2025 Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6627 # reg 6628
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - unique_id: yearly_export_2026_sgunit1
        name: Yearly Export 2026 Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6629 # reg 6630
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - unique_id: yearly_export_2027_sgunit1
        name: Yearly Export 2027 Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6631 # reg 6632
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - unique_id: yearly_export_2028_sgunit1
        name: Yearly Export 2028 Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 6633 # reg 6634
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600
      # End yearly export energy from PV

      - unique_id: system_state_sgunit1
        name: System State Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 12999 # reg 13000
        input_type: input
        data_type: uint16
        precision: 0
        scale: 1
        state_class: measurement
        scan_interval: 10

      # register running state is not available for certain SH*RS inverters
      # template sensors are used to determine the states based on other sensors
      - unique_id: running_state_sgunit1
        name: Running State Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13000 # reg 13001
        input_type: input
        data_type: uint16
        precision: 0
        state_class: measurement
        scale: 1
        scan_interval: 10

      - unique_id: daily_pv_generation_sgunit1
        name: Daily Pv Generation Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13001 # reg 13002
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: total_pv_generation_sgunit1
        name: Total Pv Generation Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13002 # reg 13003
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - unique_id: daily_exported_energy_from_PV_sgunit1
        name: Daily Exported Energy From PV Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13004 # reg 13005
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: total_exported_energy_from_pv_sgunit1
        name: Total Exported Energy From Pv Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13005 # reg 13006
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - unique_id: load_power_sgunit1
        name: Load Power Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13007 # reg 13008
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      # this value returns a positive value when exporting and a negative value when importing power
      - unique_id: battery_export_power_raw_sgunit1
        name: Battery Export Power Raw Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13009 # reg 13010
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - unique_id: daily_battery_charge_from_pv_sgunit1
        name: Daily Battery Charge From Pv Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13011 # reg 13012
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: total_battery_charge_from_pv_sgunit1
        name: Total Battery Charge From Pv Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13012 # reg 13013
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - unique_id: daily_direct_energy_consumption_sgunit1
        name: Daily Direct Energy Consumption Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13016 # reg 13017
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: total_direct_energy_consumption_sgunit1
        name: Total Direct Energy Consumption Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13017 # reg 13018
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - unique_id: battery_voltage_sgunit1
        name: Battery Voltage Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13019 # reg 13020
        input_type: input
        data_type: uint16
        precision: 0
        unit_of_measurement: V
        device_class: Voltage
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - unique_id: battery_current_sgunit1
        name: Battery Current Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13020 # reg 13021
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: A
        state_class: measurement
        device_class: Current
        scale: 0.1
        scan_interval: 10

      # always positive battery power
      # use binary_sensor.battery_charging | discharging to retrieve the direction of the energy flow
      - unique_id: battery_power_raw_sgunit1
        name: Battery Power Raw Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13021 # reg 13022
        input_type: input
        data_type: uint16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - unique_id: battery_level_sgunit1
        name: Battery Level Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13022 # reg 13023
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: "%"
        device_class: battery
        state_class: measurement
        scale: 0.1
        scan_interval: 60

      - unique_id: battery_state_of_health_sgunit1
        name: Battery State Of Health Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13023 # reg 13024
        input_type: input
        data_type: uint16
        precision: 0
        unit_of_measurement: "%"
        state_class: measurement
        scale: 0.1
        scan_interval: 600

      - unique_id: battery_temperature_sgunit1
        name: Battery Temperature Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13024 # reg 13025
        input_type: input
        data_type: int16
        precision: 1
        unit_of_measurement: °C
        device_class: Temperature
        state_class: measurement
        scale: 0.1
        scan_interval: 60

      - unique_id: daily_battery_discharge_sgunit1
        name: Daily Battery Discharge Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13025 # reg 13026
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: total_battery_discharge_sgunit1
        name: Total Battery Discharge Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13026 # reg 13027
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - unique_id: phase_a_current_sgunit1
        name: Phase A Current Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13030 # reg 13031
        input_type: input
        data_type: int16
        precision: 1
        unit_of_measurement: A
        device_class: current
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - unique_id: phase_b_current_sgunit1
        name: Phase B Current Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13031 # reg 13032
        input_type: input
        data_type: int16
        precision: 1
        unit_of_measurement: A
        device_class: current
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - unique_id: phase_c_current_sgunit1
        name: Phase C Current Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13032 # reg 13033
        input_type: input
        data_type: int16
        precision: 1
        unit_of_measurement: A
        device_class: current
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - unique_id: total_active_power_sgunit1
        name: Total Active Power Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13033 # reg 13034
        input_type: input
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - unique_id: daily_imported_energy_sgunit1
        name: Daily Imported Energy Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13035 # reg 13036
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: total_imported_energy_sgunit1
        name: Total Imported Energy Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13036 # reg 13037
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - unique_id: daily_battery_charge_sgunit1
        name: Daily Battery Charge Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13039 # reg 13040
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: total_battery_charge_sgunit1
        name: Total Battery Charge Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13040 # reg 13041
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - unique_id: daily_exported_energy_sgunit1
        name: Daily Exported Energy Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13044 # reg 13045
        input_type: input
        data_type: uint16
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - unique_id: total_exported_energy_sgunit1
        name: Total Exported Energy Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13045 # reg 13046
        input_type: input
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      #####################
      # holding registers
      #####################
      - unique_id: inverter_start_stop_sgunit1
        name: Inverter Start Stop Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 12999 # reg 13000
        input_type: holding
        data_type: uint16
        precision: 0
        state_class: measurement
        scan_interval: 10

      - unique_id: ems_mode_selection_raw_sgunit1
        name: Ems Mode Selection Raw Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13049 # reg 13050
        input_type: holding
        data_type: uint16
        state_class: measurement
        scan_interval: 10

      - unique_id: battery_forced_charge_discharge_cmd_raw_sgunit1
        name: Battery Forced Charge Discharge Cmd Raw Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13050 # reg 13051
        input_type: holding
        data_type: uint16
        precision: 0
        state_class: measurement
        scan_interval: 10

      - unique_id: battery_forced_charge_discharge_power_sgunit1
        name: Battery Forced Charge Discharge Power Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13051 # reg 13052
        input_type: holding
        data_type: uint16
        precision: 0
        # datasheet says:
        # 0 to 5000 W for SH*K-*
        # 0 to 100 % for SH*.0RT
        # for my SH10RT it is set in Watt, not in %
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scan_interval: 10

      - unique_id: max_soc_sgunit1
        name: Max Soc Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13057 # reg 13058
        input_type: holding
        data_type: uint16
        precision: 1
        unit_of_measurement: "%"
        device_class: battery
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - unique_id: min_soc_sgunit1
        name: Min Soc Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13058 # reg 13059
        input_type: holding
        data_type: uint16
        precision: 1
        unit_of_measurement: "%"
        device_class: battery
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - unique_id: export_power_limit_sgunit1
        name: Export Power Limit Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13073 # reg 13074
        input_type: holding
        data_type: uint16
        precision: 0
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - unique_id: export_power_limit_mode_raw_sgunit1
        name: Export Power Limit Mode Raw Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13086 # reg 13087
        input_type: holding
        data_type: uint16
        precision: 0
        state_class: measurement
        scan_interval: 10

      - unique_id: reserved_soc_for_backup_sgunit1
        name: Reserved Soc For Backup Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 13099 # reg 13100
        input_type: holding
        data_type: uint16
        unit_of_measurement: "%"
        device_class: battery
        state_class: measurement
        scale: 1
        scan_interval: 10

      #undocumented sensors (reverse engineered by some guys of photovoltaikforum.com and forum.iobroker.net )
      - unique_id: battery_max_charge_power_sgunit1
        name: Battery Max Charge Power Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 33046 # reg 33047
        input_type: holding
        data_type: uint16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 10
        scan_interval: 10

      - unique_id: battery_max_discharge_power_sgunit1
        name: Battery Max Discharge Power Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 33047 # reg 33048
        input_type: holding
        data_type: uint16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 10
        scan_interval: 10

      - unique_id: battery_capacity_sgunit1
        name: Battery Capacity Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 33048 # reg 33049
        input_type: holding
        data_type: uint16
        unit_of_measurement: kWh
        device_class: energy_storage
        scale: 0.01
        scan_interval: 600

      - unique_id: battery_charging_start_power_sgunit1
        name: Battery Charging Start Power Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 33148 # reg 33149
        input_type: holding
        data_type: uint16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 10
        scan_interval: 10

      - unique_id: battery_discharging_start_power_sgunit1
        name: Battery Discharging Start Power Sgunit1
        device_address: !secret sungrow_modbus_slave_1
        address: 33149 # reg 33150
        input_type: holding
        data_type: uint16
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 10
        scan_interval: 10

# 'virtual' template sensors for better readability
template:
  - binary_sensor:
      - unique_id: pv_generating_sgunit1
        name: Pv Generating Sgunit1
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: >-
          {{ 
          not is_state('sensor.running_state_sgunit1', 'unavailable') 
          and not is_state('sensor.total_dc_power_sgunit1', 'unavailable') 
          }}
        state: >-
          {% if states('sensor.running_state_sgunit1')|is_number %}
            {# use available sensor running_state_sgunit1 #}
            {{ states('sensor.running_state_sgunit1')|int |bitwise_and(0x1) }}
          {% else %} 
            {# workaround for SH*RS inverters without working running_state_sgunit1 #}
            {% if states('sensor.total_dc_power_sgunit1')|int > 0 %}
              1
            {% else %} 
              0 
            {% endif %}
          {% endif %}

      - unique_id: pv_generating_delay_sgunit1
        name: Pv Generating Delay Sgunit1
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: "{{ not is_state('binary_sensor.pv_generating_sgunit1', 'unavailable') }}"
        delay_on:
          seconds: 60
        state: "{{ states('binary_sensor.pv_generating_sgunit1') }}"

      - unique_id: battery_charging_sgunit1
        name: Battery Charging Sgunit1
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: >-
          {{ 
          not is_state('sensor.running_state_sgunit1', 'unavailable')
          or
            (   not is_state('sensor.ems_mode_selection_raw_sgunit1', 'unavailable')
            and not is_state('sensor.battery_forced_charge_discharge_cmd_raw_sgunit1', 'unavailable') 
            and not is_state('sensor.battery_power_raw_sgunit1', 'unavailable') 
            and not is_state('sensor.total_dc_power_sgunit1', 'unavailable')
            and not is_state('sensor.load_power_sgunit1', 'unavailable') 
            )
          }}
        state: >-
          {% if states('sensor.running_state_sgunit1')|is_number %}
            {# use available sensor running_state_sgunit1 #}
            {% if states('sensor.running_state_sgunit1')|int(default=0)|bitwise_and(0x2) > 0 %}
              on
            {% else %}
              off
            {% endif %}
          {% else %}
            {# workaround for SH*RS inverters without working running_state_sgunit1 #}
            {% if (states('sensor.ems_mode_selection_sgunit1') ) == "Forced mode" %}
              {# EMS forced mode #}
              {% if (states('sensor.battery_forced_charge_discharge_cmd_raw_sgunit1') == "Forced charge") %}
                {# in mode Forced charge #}
                {% if (states('sensor.battery_power_raw_sgunit1')|int > 0 ) %}
                  {# power flow from/to battery #}
                  on
                {% else %} 
                  {# no power flow from/to battery #}
                  off
                {% endif %}
              {% else %}
                {# in EMS mode, but not in mode Forced charge #}
                off
              {% endif %}
            {% else %} 
              {# not in EMS forced mode, assuming self consumption mode #}
              {% if states('sensor.total_dc_power_sgunit1')|int > states('sensor.load_power_sgunit1')|int %}
                {# more power generated than consumed. assuming battery charging #}
                on
              {% else %} 
                off
              {% endif %}
            {% endif %}
          {% endif %}

      - unique_id: battery_charging_delay_sgunit1
        name: Battery Charging Delay Sgunit1
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: "{{ not is_state('binary_sensor.battery_charging_sgunit1', 'unavailable') }}"
        delay_on:
          seconds: 60
        state: "{{ states('binary_sensor.battery_charging_sgunit1') }}"

      - unique_id: battery_discharging_sgunit1
        name: Battery Discharging Sgunit1
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: >-
          {{ 
          not is_state('sensor.running_state_sgunit1', 'unavailable')
          or
            (   not is_state('sensor.ems_mode_selection_raw_sgunit1', 'unavailable')
            and not is_state('sensor.battery_forced_charge_discharge_cmd_raw_sgunit1', 'unavailable')
            and not is_state('sensor.battery_power_raw_sgunit1', 'unavailable')
            and not is_state('sensor.total_dc_power_sgunit1', 'unavailable') 
            and not is_state('sensor.load_power_sgunit1', 'unavailable') 
            )
          }}
        state: >-
          {% if states('sensor.running_state_sgunit1')|is_number %}
            {# use available sensor running_state_sgunit1 #}
            {% if states('sensor.running_state_sgunit1')|int(default=0)|bitwise_and(0x4) > 0 %}
              on
            {% else %}
              off
            {% endif %}
          {% else %}
            {# workaround for SH*RS inverters without working running_state_sgunit1 #}
            {% if (states('sensor.ems_mode_selection_sgunit1') ) == "Forced mode" %}
              {# EMS forced mode #}
              {% if (states('sensor.battery_forced_charge_discharge_cmd_raw_sgunit1') == "Forced discharge") %}
                {# in mode Forced discharge #}
                {% if (states('sensor.battery_power_raw_sgunit1')|int > 0 ) %}
                  {# power flow from/to battery #}
                  on
                {% else %} 
                  {# no power flow from/to battery #}
                  off
                {% endif %}
              {% else %} 
                {# in EMS mode, but not in mode Forced charge #}
                off
              {% endif %}
            {% else %} 
              {# not in EMS forced mode, assuming self consumption mode #}
              {% if ( ( states('sensor.total_dc_power_sgunit1')|int < states('sensor.load_power_sgunit1')|int ) ) and states('sensor.battery_power_raw_sgunit1')|int > 0 %}
                {# more power consumed than generated and some battery power --> assuming battery discharging #}
                on
              {% else %} 
                off
              {% endif %}
            {% endif %}
          {% endif %}

      - unique_id: battery_discharging_delay_sgunit1
        name: Battery Discharging Delay Sgunit1
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: "{{ not is_state('binary_sensor.battery_discharging_sgunit1', 'unavailable') }}"
        delay_on:
          seconds: 60
        state: "{{ states('binary_sensor.battery_discharging_sgunit1') }}"

      - unique_id: exporting_power_sgunit1
        name: Exporting Power Sgunit1
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: >-
          {{ 
          not is_state('sensor.running_state_sgunit1', 'unavailable') 
          and not is_state('sensor.battery_export_power_raw_sgunit1', 'unavailable') 
          }}
        state: >-
          {% if states('sensor.running_state_sgunit1')|is_number %}
            {# use available sensor running_state_sgunit1 #}
            {{ states('sensor.running_state_sgunit1')|int(default=0)|bitwise_and(0x10) > 0 }}
          {% else %} 
            {# workaround for SH*RS inverters without working running_state_sgunit1 #}
            {% if states('sensor.battery_export_power_raw_sgunit1')|int > 0 %}
              1
            {% else %} 
              0 
            {% endif %}
          {% endif %}

      - unique_id: exporting_power_delay_sgunit1
        name: Exporting Power Delay Sgunit1
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: "{{ not is_state('binary_sensor.exporting_power_sgunit1', 'unavailable') }}"
        delay_on:
          seconds: 60
        state: "{{ states('binary_sensor.exporting_power_sgunit1') }}"

      - unique_id: importing_power_sgunit1
        name: Importing Power Sgunit1
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: >-
          {{ 
          not is_state('sensor.running_state_sgunit1', 'unavailable') 
          and not is_state('sensor.running_state_sgunit1', 'unavailable')
          }}
        state: >-
          {% if states('sensor.running_state_sgunit1')|is_number %}
            {# use available sensor running_state_sgunit1 #}
            {{ states('sensor.running_state_sgunit1')|int(default=0)|bitwise_and(0x20) > 0 }}
          {% else %} 
            {# workaround for SH*RS inverters without working running_state_sgunit1 #}
            {% if states('sensor.battery_export_power_raw_sgunit1')|int < 0 %}
              1
            {% else %}
              0
            {% endif %}
          {% endif %}

      - unique_id: importing_power_delay_sgunit1
        name: Importing Power Delay Sgunit1
        # TODO: test more with these parameters for template binary sensors
        # device_class: none / power
        # state_class: measurement
        availability: "{{ not is_state('binary_sensor.importing_power_sgunit1', 'unavailable') }}"
        delay_on:
          seconds: 60
        state: "{{ states('binary_sensor.importing_power_sgunit1') }}"

  - sensor:
      - unique_id: mppt1_power_sgunit1
        name: Mppt1 Power Sgunit1
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{ 
          not is_state('sensor.mppt1_voltage_sgunit1', 'unavailable') 
          and not is_state('sensor.mppt1_current_sgunit1', 'unavailable') 
          }}
        state: "{{ (states('sensor.mppt1_voltage_sgunit1') | float * states('sensor.mppt1_current_sgunit1') | float) |int }}"

      - unique_id: mppt2_power_sgunit1
        name: Mppt2 Power Sgunit1
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{ 
          not is_state('sensor.mppt2_voltage_sgunit1', 'unavailable') 
          and not is_state('sensor.mppt2_current_sgunit1', 'unavailable' ) 
          }}
        state: "{{ (states('sensor.mppt2_voltage_sgunit1') | float * states('sensor.mppt2_current_sgunit1') | float) |int }}"

      - unique_id: phase_a_power_sgunit1
        name: Phase A Power Sgunit1
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{ 
          not is_state('sensor.phase_a_voltage_sgunit1', 'unavailable')
          and not is_state('sensor.phase_a_current_sgunit1', 'unavailable')
          }}
        state: "{{ (states('sensor.phase_a_voltage_sgunit1') | float * states('sensor.phase_a_current_sgunit1') | float) |int }}"

      - unique_id: phase_b_power_sgunit1
        name: Phase B Power Sgunit1
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{ 
          not is_state('sensor.phase_b_voltage_sgunit1', 'unavailable') 
          and not is_state('sensor.phase_b_current_sgunit1', 'unavailable') 
          }}
        state: "{{ (states('sensor.phase_b_voltage_sgunit1') | float * states('sensor.phase_b_current_sgunit1') | float) |int }}"

      - unique_id: phase_c_power_sgunit1
        name: Phase C Power Sgunit1
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{ 
          not is_state('sensor.phase_c_voltage_sgunit1', 'unavailable')
          and not is_state('sensor.phase_c_current_sgunit1', 'unavailable')
          }}
        state: "{{ (states('sensor.phase_c_voltage_sgunit1') | float * states('sensor.phase_c_current_sgunit1') | float) |int }}"

      # template sensor in case the meter is not available (grid is off) and returns 0x7FFFFF
      - unique_id: meter_active_power_sgunit1
        name: Meter Active Power Sgunit1
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{ 
          not is_state('sensor.meter_active_power_raw_sgunit1', 'unavailable')
          and states('sensor.meter_active_power_raw_sgunit1')|int != 0x7FFFFFFF
          }}
        state: "{{ states('sensor.meter_active_power_raw_sgunit1') }}"

      # template sensor in case the meter is not available (grid is off) and returns 0x7FFFFF
      - unique_id: meter_phase_a_active_power_sgunit1
        name: Meter Phase A Active Power Sgunit1
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{ 
          not is_state('sensor.meter_phase_a_active_power_raw_sgunit1', 'unavailable')
          and states('sensor.meter_phase_a_active_power_raw_sgunit1')|int != 0x7FFFFFFF
          }}
        state: "{{ states('sensor.meter_phase_a_active_power_raw_sgunit1') }}"

      # template sensor in case the meter is not available (grid is off) and returns 0x7FFFFF
      - unique_id: meter_phase_b_active_power_sgunit1
        name: Meter Phase B Active Power Sgunit1
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{ 
          not is_state('sensor.meter_phase_b_active_power_raw_sgunit1', 'unavailable') 
          and states('sensor.meter_phase_b_active_power_raw_sgunit1')|int != 0x7FFFFFFF 
          }}
        state: "{{ states('sensor.meter_phase_b_active_power_raw_sgunit1') }}"

      # template sensor in case the meter is not available (grid is off) and returns 0x7FFFFF
      - unique_id: meter_phase_c_active_power_sgunit1
        name: Meter Phase C Active Power Sgunit1
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{ 
          not is_state('sensor.meter_phase_c_active_power_raw_sgunit1', 'unavailable')
          and states('sensor.meter_phase_c_active_power_raw_sgunit1')|int != 0x7FFFFFFF
          }}
        state: "{{ states('sensor.meter_phase_c_active_power_raw_sgunit1') }}"

      - unique_id: inverter_state_sgunit1
        name: Inverter State Sgunit1
        # TODO: test state_class with enum
        # state_class: measurement
        device_class: enum
        availability: "{{ not is_state('sensor.system_state_sgunit1', 'unavailable') }}"
        state: >-
          {% if ((states('sensor.system_state_sgunit1') | int(default=0)) == 0x0002) %}
            Stop
          {% elif ((states('sensor.system_state_sgunit1') | int(default=0)) == 0x0008) %}
            Standby
          {% elif ((states('sensor.system_state_sgunit1') | int(default=0)) == 0x0010) %}
            Initial Standby
          {% elif ((states('sensor.system_state_sgunit1') | int(default=0)) == 0x0020) %}
            Startup
          {% elif ((states('sensor.system_state_sgunit1') | int(default=0)) == 0x0040) %}
            Running
          {% elif ((states('sensor.system_state_sgunit1') | int(default=0)) == 0x0100) %}
            Fault
          {% elif ((states('sensor.system_state_sgunit1') | int(default=0)) == 0x0400) %}
            Maintain mode
          {% elif ((states('sensor.system_state_sgunit1') | int(default=0)) == 0x0800) %}
            Forced mode
          {% elif ((states('sensor.system_state_sgunit1') | int(default=0)) == 0x1000) %}
            Off-grid mode
          {% elif ((states('sensor.system_state_sgunit1') | int(default=0)) == 0x2501) %}
            Restarting
          {% elif ((states('sensor.system_state_sgunit1') | int(default=0)) == 0x4000) %}
            External EMS mode
          {% else %}
            Unknown - should not see me!
          {% endif %}

      - unique_id: device_type_sgunit1
        name: Device Type Sgunit1
        availability: "{{ not is_state('sensor.dev_code_sgunit1', 'unavailable') }}"
        # TODO: test state_class with enum
        # state_class: measurement
        device_class: enum
        state: >-
          {% if ((states('sensor.dev_code_sgunit1') | int(default=0))  == 0x0D06) %}
            SH3K6
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0D07) %}
            SH4K6
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0D09) %}
            SH5K-20  
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0D03) %}
            SH5K-V13
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0D0A) %}
            SH3K6-30
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0D0B) %}
            SH4K6-30
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0D0C) %}
            SH5K-30
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0D17) %}
            SH3.RS
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0D0D) %}
            SH3.6RS
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0D18) %}
            SH4.0RS
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0D0F) %}
            SH5.0RS
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0D10) %}
            SH6.0RS
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0D1A) %}
            SH8.0RS
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0D1B) %}
            SH10RS
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0E00) %}
            SH5.0RT
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0E01) %}
            SH6.0RT
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0E02) %}
            SH8.0RT
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0E03) %}
            SH10RT
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0E10) %}
            SH5.0RT-20
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0E11) %}
            SH6.0RT-20
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0E12) %}
            SH8.0RT-20
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0E13) %}
            SH10RT-20
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0E0C) %}
            SH5.0RT-V112
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0E0D) %}
            SH6.0RT-V112
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0E0E) %}
            SH8.0RT-V112
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0E0F) %}
            SH10RT-V112
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0E08) %}
            SH5.0RT-V122
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0E09) %}
            SH6.0RT-V122
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0E0A) %}
            SH8.0RT-V122
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0E0B) %}
            SH10RT-V122
          {% elif ((states('sensor.dev_code_sgunit1') | int(default=0)) == 0x0D0E) %}
            SH4.6RS 
          {% else %}
            Unknown device code!
          {% endif %}

      # make the sensor battery_forced_charge_discharge_cmd_raw_sgunit1 more human readable
      # Inverter States from modbus reference manual
      # 0xAA forced charge
      # 0xBB forced discharge
      # 0xCC Stop (default)
      - unique_id: battery_forced_charge_discharge_cmd_sgunit1
        name: Battery Forced Charge Discharge Cmd Sgunit1
        availability: "{{ not is_state('sensor.battery_forced_charge_discharge_cmd_raw_sgunit1', 'unavailable') }}"
        # TODO: test state_class with enum
        # state_class: measurement
        device_class: enum
        state: >-
          {% if ((states('sensor.battery_forced_charge_discharge_cmd_raw_sgunit1') | int(default=0)) == 0x00AA) %}
            Forced charge
          {% elif ((states('sensor.battery_forced_charge_discharge_cmd_raw_sgunit1') | int(default=0))  == 0x00BB) %}
            Forced discharge
          {% elif ((states('sensor.battery_forced_charge_discharge_cmd_raw_sgunit1') | int(default=0))  == 0x00CC) %}
            Stop (default)
          {% else %}
            Unknown - should not see me!
          {% endif %}

      - unique_id: export_power_limit_mode_sgunit1
        name: Export Power Limit Mode Sgunit1
        availability: "{{ not is_state('sensor.export_power_limit_mode_raw_sgunit1', 'unavailable') }}"
        # TODO: test state_class with enum
        # state_class: measurement
        device_class: enum
        state: >-
          {% if ((states('sensor.export_power_limit_mode_raw_sgunit1') | int(default=0)) == 0x00AA) %}
            Enabled
          {% elif ((states('sensor.export_power_limit_mode_raw_sgunit1') | int(default=0))  == 0x0055) %}
            Disabled
          {% else %}
            Unknown - should not see me!
          {% endif %}

      # make the sensor ems_selection_raw more human readable
      - unique_id: ems_mode_selection_sgunit1
        name: Ems Mode Selection Sgunit1
        availability: "{{ not is_state('sensor.ems_mode_selection_raw_sgunit1', 'unavailable') }}"
        # TODO: test state_class with enum with enum
        # state_class: measurement
        device_class: enum
        state: >-
          {% if ((states('sensor.ems_mode_selection_raw_sgunit1') | int(default=0)) == 0) %}
            Self-consumption mode (default)
          {% elif ((states('sensor.ems_mode_selection_raw_sgunit1') | int(default=0)) == 2) %}
            Forced mode
          {% elif ((states('sensor.ems_mode_selection_raw_sgunit1') | int(default=0)) == 3) %}
            External EMS
          {% elif ((states('sensor.ems_mode_selection_raw_sgunit1') | int(default=0)) == 4) %}
            VPP
          {% elif ((states('sensor.ems_mode_selection_raw_sgunit1') | int(default=0)) == 8) %}
            MicroGrid
          {% else %}
            Unknown - should not see me!
          {% endif %}

      - unique_id: signed_battery_power_sgunit1
        name: Signed Battery Power Sgunit1
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{ 
          not is_state('binary_sensor.battery_charging_sgunit1', 'unavailable') 
          and not is_state('binary_sensor.battery_discharging_sgunit1', 'unavailable')
          and not is_state('sensor.battery_power_raw_sgunit1', 'unavailable')
          }}
        state: >-
          {% if is_state('binary_sensor.battery_charging_sgunit1', 'on') %}
            {{ (states('sensor.battery_power_raw_sgunit1') | float)}} 
          {% elif is_state('binary_sensor.battery_discharging_sgunit1', 'on') %} 
            {{ (states('sensor.battery_power_raw_sgunit1') | float * -1)}} 
          {% else %} 
            0 
          {% endif %}

      - unique_id: battery_charging_power_sgunit1
        name: Battery Charging Power Sgunit1
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{ 
          not is_state('binary_sensor.battery_charging_sgunit1', 'unavailable') 
          and not is_state('sensor.battery_power_raw_sgunit1', 'unavailable')
          }}
        state: >-
          {% if is_state('binary_sensor.battery_charging_sgunit1', 'on') %}
            {{ states('sensor.battery_power_raw_sgunit1') }}
          {% else %}
            0
          {% endif %}

      - unique_id: battery_discharging_power_sgunit1
        name: Battery Discharging Power Sgunit1
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >-
          {{ 
          not is_state('binary_sensor.battery_discharging_sgunit1', 'unavailable') 
          and not is_state('sensor.battery_power_raw_sgunit1', 'unavailable') 
          }}
        state: >-
          {% if is_state('binary_sensor.battery_discharging_sgunit1', 'on') %}
            {{ states('sensor.battery_power_raw_sgunit1') }}
          {% else %}
            0
          {% endif %}

      - unique_id: import_power_sgunit1
        name: Import Power Sgunit1
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: "{{ not is_state('sensor.battery_export_power_raw_sgunit1', 'unavailable') }}"
        state: >-
          {% if states('sensor.battery_export_power_raw_sgunit1')|int < 0 %}
            {{ states('sensor.battery_export_power_raw_sgunit1')|int *-1 }}
          {% else %}
            0
          {% endif %}

      - unique_id: export_power_sgunit1
        name: Export Power Sgunit1
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: "{{states('sensor.battery_export_power_raw_sgunit1')|is_number }}"
        state: >-
          {% if states('sensor.battery_export_power_raw_sgunit1')|int > 0 %}
            {{ states('sensor.battery_export_power_raw_sgunit1') }}
          {% else %}
            0
          {% endif %}

      - unique_id: monthly_pv_generation_current_sgunit1
        name: Monthly Pv Generation Current Sgunit1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        availability: >-
          {% set currMonth = 'monthly_pv_generation_' ~ '%0.2d' % now().month ~ '_' ~ now().timestamp() | timestamp_custom('%B') | lower %}
          {{ states('sensor.' ~ currMonth)|is_number }}
        state: >
          {% set currMonth = 'monthly_pv_generation_' ~ '%0.2d' % now().month ~ '_' ~ now().timestamp() | timestamp_custom('%B') | lower %}
          {{ states('sensor.' ~ currMonth) }}

      - unique_id: yearly_pv_generation_current_sgunit1
        name: Yearly Pv Generation Current Sgunit1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        availability: >-
          {% set currYear = 'yearly_pv_generation_' ~ now().year %}
          {{ states('sensor.' ~ currYear)|is_number }}
        state: >
          {% set currYear = 'yearly_pv_generation_' ~ now().year %}
          {{ states('sensor.' ~ currYear) }}

      - unique_id: monthly_export_current_sgunit1
        name: Monthly Export Current Sgunit1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        availability: >-
          {% set currMonth = 'monthly_export_' ~ '%0.2d' % now().month ~ '_' ~ now().timestamp() | timestamp_custom('%B') | lower %}
          {{ states('sensor.' ~ currMonth)|is_number }}
        state: >
          {% set currMonth = 'monthly_export_' ~ '%0.2d' % now().month ~ '_' ~ now().timestamp() | timestamp_custom('%B') | lower %}
          {{ states('sensor.' ~ currMonth) }}

      - unique_id: yearly_export_current_sgunit1
        name: Yearly Export Current Sgunit1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        availability: >-
          {% set currYear = 'yearly_export_' ~ now().year %}
          {{ states('sensor.' ~ currYear)|is_number }}
        state: >
          {% set currYear = 'yearly_export_' ~ now().year %}
          {{ states('sensor.' ~ currYear) }}

      - unique_id: battery_level_nominal_sgunit1
        name: Battery Level Nominal Sgunit1
        unit_of_measurement: "%"
        device_class: battery
        state_class: measurement
        availability: >-
          {{ 
          not is_state('sensor.battery_level_sgunit1', 'unavailable') 
          and not is_state('sensor.min_soc_sgunit1', 'unavailable') 
          and not is_state('sensor.max_soc_sgunit1', 'unavailable') 
          }}
        state: >-
          {% set soc_min = states('sensor.min_soc_sgunit1') | float %}
          {% set soc_max = states('sensor.max_soc_sgunit1') | float %}
          {% set soc_cur = states('sensor.battery_level_sgunit1') | float %}
          {{
            ((soc_min) + ((soc_max - soc_min) * (soc_cur / 100))) | round(1)
          }}

      - unique_id: battery_charge_nominal_sgunit1
        name: Battery Charge Nominal Sgunit1
        unit_of_measurement: kWh
        device_class: energy_storage
        state_class: measurement
        availability: >-
          {{ 
          not is_state('sensor.battery_capacity_sgunit1', 'unavailable')
          and not is_state('sensor.battery_level_nominal', 'unavailable')
          }}
        state: >-
          {{
            ( states('sensor.battery_capacity_sgunit1') | float *
            states('sensor.battery_level_nominal') | float / 100 )| round(1)
          }}

      - unique_id: battery_charge_sgunit1
        name: Battery Charge Sgunit1
        unit_of_measurement: kWh
        device_class: energy_storage
        state_class: measurement
        availability: >-
          {{ 
          not is_state('sensor.battery_capacity_sgunit1', 'unavailable') 
          and not is_state('sensor.battery_level_sgunit1', 'unavailable') 
          and not is_state('sensor.min_soc_sgunit1', 'unavailable') 
          and not is_state('sensor.max_soc_sgunit1', 'unavailable') 
          }}
        state: >-
          {{ 
            ( states('sensor.battery_capacity_sgunit1')|float 
            * ( states('sensor.max_soc_sgunit1')|float - states('sensor.min_soc_sgunit1')|float ) /100 
            * states('sensor.battery_level_sgunit1')|float /100 
            ) |round(2)
          }}

      - unique_id: daily_consumed_energy_sgunit1
        name: Daily Consumed Energy Sgunit1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        availability: >-
          {{ 
          not is_state('sensor.daily_pv_generation_sgunit1', 'unavailable') 
          and not is_state('sensor.daily_exported_energy_sgunit1', 'unavailable') 
          and not is_state('sensor.daily_imported_energy_sgunit1', 'unavailable') 
          and not is_state('sensor.daily_battery_charge_sgunit1', 'unavailable') 
          and not is_state('sensor.daily_battery_discharge_sgunit1', 'unavailable') 
          }}
        state: >-
          {{ 
            (
              states('sensor.daily_pv_generation_sgunit1')|float 
              - states('sensor.daily_exported_energy_sgunit1')|float 
              + states('sensor.daily_imported_energy_sgunit1')|float 
              - states('sensor.daily_battery_charge_sgunit1')|float 
              + states('sensor.daily_battery_discharge_sgunit1')|float
            )|int 
          }}

      - unique_id: total_consumed_energy_sgunit1
        name: Total Consumed Energy Sgunit1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        availability: >-
          {{ 
          not is_state('sensor.total_pv_generation_sgunit1', 'unavailable') 
          and not is_state('sensor.total_exported_energy_sgunit1', 'unavailable') 
          and not is_state('sensor.total_imported_energy_sgunit1', 'unavailable') 
          and not is_state('sensor.total_battery_charge_sgunit1', 'unavailable') 
          and not is_state('sensor.total_battery_discharge_sgunit1', 'unavailable') 
          }}
        state: >-
          {{ 
            (
              states('sensor.total_pv_generation_sgunit1')|float 
              - states('sensor.total_exported_energy_sgunit1')|float 
              + states('sensor.total_imported_energy_sgunit1')|float 
              - states('sensor.total_battery_charge_sgunit1')|float 
              + states('sensor.total_battery_discharge_sgunit1')|float
            )|int 
          }}

# getting input for Min and Max SoC
input_number:
  set_min_soc_sgunit1:
    name: Set min SoC
    min: 0
    max: 50
    step: 1

  set_max_soc_sgunit1:
    name: Set max SoC
    min: 50
    max: 100
    step: 1

  set_reserved_soc_for_backup_sgunit1:
    name: Set reserved SoC for backup
    min: 0
    max: 75
    step: 1

  set_forced_charge_discharge_power_sgunit1:
    name: Set forced charge discharge power in W
    min: 0
    max: 5000 # change this value according to the capability of your battery
    step: 100

  set_battery_max_charge_power_sgunit1:
    name: Set max battery charge power in W
    min: 100
    max: 5000 # change this value according to the capability of your battery
    step: 100

  set_battery_max_discharge_power_sgunit1:
    name: Set max battery discharge power in W
    min: 100
    max: 5000 # change this value according to the capability of your battery
    step: 100

  set_battery_charging_start_power_sgunit1:
    name: Set battery charging start power in W
    min: 0
    max: 1000
    step: 10

  set_battery_discharging_start_power_sgunit1:
    name: Set battery discharging start power in W
    min: 0
    max: 1000
    step: 10

  set_export_power_limit_sgunit1:
    name: Set export power limit
    min: 0
    max: 10500 # Note: max for SH10.RT. It would be ncie to have this as a global variable /secret
    step: 100

input_select:
  set_inverter_run_mode_sgunit1:
    name: Inverter mode
    options:
      - "Enabled"
      - "Shutdown"

  # get input for battery mode (forced charge/discharge, stop (default) )
  set_ems_mode_sgunit1:
    name: EMS mode
    options:
      - "Self-consumption mode (default)"
      - "Forced mode"
      - "External EMS" # required for multiple inverters main /follower?
    # these are commented, because they are rarely used
    #      - "VPP"
    #      - "MicroGrid"
    icon: mdi:battery-unknown

  set_battery_forced_charge_discharge_cmd_sgunit1:
    name: Battery forced charge discharge cmd
    options:
      - "Stop (default)"
      - "Forced charge"
      - "Forced discharge"
    icon: mdi:battery-unknown

  set_export_power_limit_mode_sgunit1:
    name: Export power limit mode
    options:
      - "Enabled"
      - "Disabled"
    icon: mdi:export

# Automations: Write modbus registers on input changes via GUI
# note: If you change a value by the sliders, it will take up to 60 seconds until the state variables are updated
# Unfortunately, I could not find a way to "force update" modbus registers, yet...
automation:
  - id: "automation_inverter_state_sgunit1"
    alias: Inverter State Sgunit1
    description: "Enables/ stops the inverter"
    trigger:
      - platform: state
        entity_id:
          - input_select.set_inverter_run_mode_sgunit1
    condition: []
    variables:
      sg_start: 0xCF
      sg_stop: 0xCE
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx_1
          slave: !secret sungrow_modbus_slave_1
          address: 12999 # reg 13000
          value: >
            {% if is_state('input_select.set_inverter_run_mode_sgunit1', "Enabled") %}
              {{sg_start}}
            {% else %}
              {{sg_stop}}
            {% endif %}
    mode: single

  - id: "automation_inverter_state_input_selector_update_sgunit1"
    alias: Inverter State Input Selector Update Sgunit1
    description: "Updates enable/ stops input selector"
    trigger:
      - platform: state
        entity_id:
          - sensor.sungrow_inverter_state
    condition:
      - condition: template
        value_template: "{{ not is_state('sensor.sungrow_inverter_state', 'unavailable') }}"
    action:
      - service: input_select.select_option
        target:
          entity_id: input_select.set_inverter_run_mode_sgunit1
        data:
          option: >
            {% if is_state('sensor.sungrow_inverter_state', "Stop") %}
              Shutdown
            {% else %}
              Enabled
            {% endif %}
    mode: single

  - id: "automation_inverter_update_max_soc_sgunit1"
    alias: Inverter Update Max Soc Sgunit1
    description: "Updates Sungrow max Soc holding register"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_max_soc_sgunit1
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx_1
          slave: !secret sungrow_modbus_slave_1
          address: 13057 # reg 13058
          value: "{{ states('input_number.set_max_soc_sgunit1') | int *10}}"
    mode: single

  - id: "automation_inverter_update_max_soc_input_slider_update_sgunit1"
    alias: Inverter Update Max Soc Input Slider Update Sgunit1
    description: "Updates Sungrow max Soc input slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.max_soc_sgunit1
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_max_soc_sgunit1
        data:
          value: "{{ states('sensor.max_soc_sgunit1') }}"
    mode: single

  - id: "automation_inverter_update_min_soc_sgunit1"
    alias: Inverter Update Min Soc Sgunit1
    description: "Updates Sungrow min Soc holding register"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_min_soc_sgunit1
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx_1
          slave: !secret sungrow_modbus_slave_1
          address: 13058 # reg 13059
          value: "{{ states('input_number.set_min_soc_sgunit1') | int *10}}"
    mode: single

  - id: "automation_inverter_update_min_soc_input_slider_update_sgunit1"
    alias: Inverter Update Min Soc Input Slider Update Sgunit1
    description: "Updates Sungrow min Soc input slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.min_soc_sgunit1
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_min_soc_sgunit1
        data:
          value: "{{ states('sensor.min_soc_sgunit1') }}"
    mode: single

  - id: "automation_inverter_update_reserved_soc_for_backup_sgunit1"
    alias: Inverter Update Reserved Soc For Backup Sgunit1
    description: "Updates reserved SoC for backup register"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_reserved_soc_for_backup_sgunit1
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx_1
          slave: !secret sungrow_modbus_slave_1
          address: 13099 # reg 13100
          value: "{{ states('input_number.set_reserved_soc_for_backup_sgunit1') | int}}"
    mode: single

  - id: "automation_inverter_update_reserved_backup_soc_input_slider_update_sgunit1"
    alias: Inverter Update Reserved Backup Soc Input Slider Update Sgunit1
    description: "Updates Sungrow reserved backup Soc input slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.reserved_soc_for_backup_sgunit1
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_reserved_soc_for_backup_sgunit1
        data:
          value: "{{ states('sensor.reserved_soc_for_backup_sgunit1') }}"
    mode: single

  - id: "automation_inverter_update_battery_forced_charge_discharge_cmd_sgunit1"
    alias: Inverter Update Battery Forced Charge Discharge Cmd Sgunit1
    description: "Updates Sungrow holding register for battery forced charge discharge command"
    trigger:
      - platform: state
        entity_id:
          - input_select.set_battery_forced_charge_discharge_cmd_sgunit1
    condition: []
    variables:
      ems_forced_charge: 0xAA
      ems_forced_discharge: 0xBB
      ems_stop_default: 0xCC
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx_1
          slave: !secret sungrow_modbus_slave_1
          address: 13050 # reg 13051
          value: >
            {% if is_state('input_select.set_battery_forced_charge_discharge_cmd_sgunit1', "Stop (default)") %} 
              {{ems_stop_default}}
            {% elif is_state('input_select.set_battery_forced_charge_discharge_cmd_sgunit1', "Forced charge") %} 
              {{ems_forced_charge}}
            {% elif is_state('input_select.set_battery_forced_charge_discharge_cmd_sgunit1', "Forced discharge") %} 
              {{ems_forced_discharge}}
            {% else %}
              {{ems_stop_default}}
            {% endif %}
    mode: single

  - id: "automation_inverter_update_battery_forced_charge_discharge_cmd_input_select_update_sgunit1"
    alias: Inverter Update Battery Forced Charge Discharge Cmd Input Select Update Sgunit1
    description: "Updates Sungrow battery forced charge discharge cmd input select"
    trigger:
      - platform: state
        entity_id:
          - sensor.battery_forced_charge_discharge_cmd_raw_sgunit1
    condition:
      - condition: template
        value_template: "{{ not is_state('sensor.battery_forced_charge_discharge_cmd_raw_sgunit1', 'unavailable') }}"
    action:
      - service: input_select.select_option
        target:
          entity_id: input_select.set_battery_forced_charge_discharge_cmd_sgunit1
        data:
          option: "{{ states('sensor.battery_forced_charge_discharge_cmd_raw_sgunit1') }}"
    mode: single

  - id: "automation_inverter_update_ems_mode_sgunit1"
    alias: Inverter Update Ems Mode Sgunit1
    description: "Updates EMS mode"
    trigger:
      - platform: state
        entity_id:
          - input_select.set_ems_mode_sgunit1
    condition: []
    variables:
      ems_mode_self_consume: 0
      ems_mode_forced: 2
      ems_mode_external: 3
      ems_mode_vpp: 4
      ems_mode_microgrid: 8
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx_1
          slave: !secret sungrow_modbus_slave_1
          address: 13049 # reg 13050
          value: >
            {% if is_state('input_select.set_ems_mode_sgunit1', "Self-consumption mode (default)") %} 
              {{ems_mode_self_consume}}
            {% elif is_state('input_select.set_ems_mode_sgunit1', "Forced mode") %} 
              {{ems_mode_forced}}
            {% elif is_state('input_select.set_ems_mode_sgunit1', "External EMS") %} 
              {{ems_mode_external}}
            {% elif is_state('input_select.set_ems_mode_sgunit1', "VPP") %} 
              {{ems_mode_vpp}}
            {% elif is_state('input_select.set_ems_mode_sgunit1', "MicroGrid") %} 
              {{ems_mode_microgrid}}
            {% else %} 
              {{ems_mode_self_consume}}
            {% endif %}
    mode: single

  - id: "automation_inverter_export_power_limit_mode_update_sgunit1"
    alias: Inverter Export Power Limit Mode Update Sgunit1
    description: "Updates Enable/Disable for export power limit mode"
    trigger:
      - platform: state
        entity_id:
          - sensor.export_power_limit_mode_raw_sgunit1
    condition:
      - condition: template
        value_template: "{{ not is_state('sensor.export_power_limit_mode_raw_sgunit1', 'unavailable') }}"
    action:
      - service: input_select.select_option
        target:
          entity_id: input_select.set_export_power_limit_mode_sgunit1
        data:
          option: >
            {% if ((states('sensor.export_power_limit_mode_raw_sgunit1') | int(default=0)) == 0x00AA) %} 
              Enabled
            {% elif ((states('sensor.export_power_limit_mode_raw_sgunit1') | int(default=0)) == 0x0055) %} 
              Disabled
            {% endif %}
    mode: single

  - id: "automation_export_power_limit_mode_sgunit1"
    alias: Export Power Limit Mode Sgunit1
    description: "Set export power limit mode"
    trigger:
      - platform: state
        entity_id:
          - input_select.set_export_power_limit_mode_sgunit1
    condition: []
    variables:
      export_limit_enable: 0xAA
      export_limit_disable: 0x55
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx_1
          slave: !secret sungrow_modbus_slave_1
          address: 13086 # reg 13087
          value: >
            {% if is_state('input_select.set_export_power_limit_mode_sgunit1', "Enabled") %} 
              {{export_limit_enable}}
            {% elif is_state('input_select.set_export_power_limit_mode_sgunit1', "Disabled") %}
              {{export_limit_disable}}
            {% else %}
              {{export_limit_disable}}
            {% endif %}
    mode: single

  - id: "automation_inverter_export_power_limit_update_sgunit1"
    alias: Inverter Export Power Limit Update Sgunit1
    description: "Updates export power limit slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.export_power_limit_sgunit1
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_export_power_limit_sgunit1
        data:
          value: "{{ states('sensor.export_power_limit_sgunit1') }}"
    mode: single

  - id: "automation_inverter_set_export_power_limit_sgunit1"
    alias: Inverter Set Export Power Limit Sgunit1
    description: "Sets export power limit"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_export_power_limit_sgunit1
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx_1
          slave: !secret sungrow_modbus_slave_1
          address: 13073 # reg 13074
          value: "{{ states('input_number.set_export_power_limit_sgunit1') }}"
    mode: single

  - id: "automation_inverter_update_ems_mode_input_select_update_sgunit1"
    alias: Inverter Update Ems Mode Input Select Update Sgunit1
    description: "Updates EMS mode input select"
    trigger:
      - platform: state
        entity_id:
          - sensor.ems_mode_selection_sgunit1
    condition:
      - condition: template
        value_template: "{{ not is_state('sensor.ems_mode_selection_sgunit1', 'unavailable') }}"
    action:
      - service: input_select.select_option
        target:
          entity_id: input_select.set_ems_mode_sgunit1
        data:
          option: "{{ states('sensor.ems_mode_selection_sgunit1') }}"
    mode: single

  - id: "automation_inverter_update_battery_forced_charge_discharge_power_sgunit1"
    alias: Inverter Update Battery Forced Charge Discharge Power Sgunit1
    description: "Sets battery forced charge discharge power"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_forced_charge_discharge_power_sgunit1
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx_1
          slave: !secret sungrow_modbus_slave_1
          address: 13051 # reg 13052
          value: "{{ states('input_number.set_forced_charge_discharge_power_sgunit1') | int}}"
    mode: single

  - id: "automation_inverter_update_battery_forced_charge_discharge_power_input_slider_update_sgunit1"
    alias: Inverter Update Battery Forced Charge Discharge Power Input Slider Update Sgunit1
    description: "Updates battery forced charge discharge power input slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.battery_forced_charge_discharge_power_sgunit1
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_forced_charge_discharge_power_sgunit1
        data:
          value: "{{ states('sensor.battery_forced_charge_discharge_power_sgunit1') }}"
    mode: single

  - id: "automation_inverter_update_battery_max_charge_power_sgunit1"
    alias: Inverter Update Battery Max Charge Power Sgunit1
    description: "Sets battery max charge power"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_battery_max_charge_power_sgunit1
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx_1
          slave: !secret sungrow_modbus_slave_1
          address: 33046 # reg 33047
          value: "{{ states('input_number.set_battery_max_charge_power_sgunit1') |float /10 |int}}"
    mode: single

  - id: "automation_inverter_update_battery_max_charge_power_input_slider_update_sgunit1"
    alias: Inverter Update Battery Max Charge Power Input Slider Update Sgunit1
    description: "Updates battery max charge power input slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.battery_max_charge_power_sgunit1
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_battery_max_charge_power_sgunit1
        data:
          value: "{{ states('sensor.battery_max_charge_power_sgunit1') }}"
    mode: single

  - id: "automation_inverter_update_battery_max_discharge_power_sgunit1"
    alias: Inverter Update Battery Max Discharge Power Sgunit1
    description: "Sets battery max discharge power"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_battery_max_discharge_power_sgunit1
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx_1
          slave: !secret sungrow_modbus_slave_1
          address: 33047 # reg 33048
          value: "{{ states('input_number.set_battery_max_discharge_power_sgunit1')  |float /10 |int}}"
    mode: single

  - id: "automation_inverter_update_battery_max_discharge_power_input_slider_update_sgunit1"
    alias: Inverter Update Battery Max Discharge Power Input Slider Update Sgunit1
    description: "Updates battery max discharge power input slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.battery_max_discharge_power_sgunit1
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_battery_max_discharge_power_sgunit1
        data:
          value: "{{ states('sensor.battery_max_discharge_power_sgunit1') }}"
    mode: single

  - id: "automation_inverter_update_battery_charging_start_power_sgunit1"
    alias: Inverter Update Battery Charging Start Power Sgunit1
    description: "Sets battery charging start power"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_battery_charging_start_power_sgunit1
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx_1
          slave: !secret sungrow_modbus_slave_1
          address: 33148 # reg 33149
          value: "{{ states('input_number.set_battery_charging_start_power_sgunit1') |float /10 |int}}"
    mode: single

  - id: "automation_inverter_update_battery_charging_start_power_input_slider_update_sgunit1"
    alias: Inverter Update Battery Charging Start Power Input Slider Update Sgunit1
    description: "Updates battery charging start power input slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.battery_charging_start_power_sgunit1
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_battery_charging_start_power_sgunit1
        data:
          value: "{{ states('sensor.battery_charging_start_power_sgunit1') }}"
    mode: single

  - id: "automation_inverter_update_battery_discharging_start_power_sgunit1"
    alias: Inverter Update Battery Discharging Start Power Sgunit1
    description: "Sets battery discharging start power"
    trigger:
      - platform: state
        entity_id:
          - input_number.set_battery_discharging_start_power_sgunit1
    condition: []
    action:
      - service: modbus.write_register
        data_template:
          hub: SungrowSHx_1
          slave: !secret sungrow_modbus_slave_1
          address: 33149 # reg 33150
          value: "{{ states('input_number.set_battery_discharging_start_power_sgunit1') |float /10 | int}}"
    mode: single

  - id: "automation_inverter_update_battery_discharging_start_power_input_slider_update_sgunit1"
    alias: Inverter Update Battery Discharging Start Power Input Slider Update Sgunit1
    description: "Updates battery discharging start power input slider"
    trigger:
      - platform: state
        entity_id:
          - sensor.battery_discharging_start_power_sgunit1
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_battery_discharging_start_power_sgunit1
        data:
          value: "{{ states('sensor.battery_discharging_start_power_sgunit1') }}"
    mode: single
